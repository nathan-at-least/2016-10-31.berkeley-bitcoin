
.. Zerocash - Easier, Simpler, Safer slides file, created by
   hieroglyph-quickstart on Mon Apr 27 16:33:37 2015.

.. We re-appropriate the "accelerator" class from hieroglyph style which
   has text underlining.  This way I don't need to figure out how to
   include custom css:

.. role:: underline
   :class: accelerator


Authorization in a Permissionless World
=======================================

**Exploring the Zcash niche**

`Nathan Wilcox` / nathan@z.cash / @least_nathan

https://z.cash

.. Why doesn't this work?
.. Contents
.. ========
..
.. .. toctree::
..    :maxdepth: 2

Who We Are
==========

- **security engineers**

⋮

Who We Are
==========

- **security engineers**
- **cryptographers**

⋮

Who We Are
==========

- **security engineers**
- **cryptographers**
- **cryptocurrency experts**

What We're Doing
================

**Zcash**

- A **permissionless** cryptocurrency with transaction privacy
- Launched on the 28th!
- https://z.cash

It's Alive!
-----------

.. figure:: _static/2016-10-31-zcashd-metrics-screen.png
   :width: 80%

   HT @str4d for screenshot; HT John Tromp for efficient CPU miner

What is Zcash
=============

- **permissionless**: Anyone may use it at their discretion.

⋮

What is Zcash
=============

- **permissionless**: Anyone may use it at their discretion.
- **cryptocurrency**: Transactions encapsulate monetary policy and ownership semantics.

⋮

What is Zcash
=============

- **permissionless**: Anyone may use it at their discretion.
- **cryptocurrency**: Transactions encapsulate monetary policy and ownership semantics.
- **privacy**: Only transaction participants see details by default.

Transaction Details
-------------------

- In Zcash today, transaction details include:

  + sender,
  + recipient,
  + amount
  + memo

⋮

Transaction Details
-------------------

- In Zcash *today*, transaction details include:

  + sender,
  + recipient,
  + amount
  + memo

- In Zcash tomorrow: privacy may be extended to cover more.

How?
----

* The privacy is implemented with zero-knowledge proving technology.

⋮

How?
----

* The privacy is implemented with zero-knowledge proving technology.
* A zero-knowledge proof convinces a `verifier` of some logical statement, `S`,

⋮

How?
----

* The privacy is implemented with zero-knowledge proving technology.
* A zero-knowledge proof convinces a `verifier` of some logical statement, `S`,

  + -given `S` along with `public` inputs.

⋮

How?
----

* The privacy is implemented with zero-knowledge proving technology.
* A zero-knowledge proof convinces a `verifier` of some logical statement, `S`,

  + -given `S` along with `public` inputs.
  + -even though `S` is an assertion about those public inputs and **private** inputs.

⋮

How?
----

* The privacy is implemented with zero-knowledge proving technology.
* A zero-knowledge proof convinces a `verifier` of some logical statement, `S`,

  + -given `S` along with public inputs.
  + -even though `S` is an assertion about those public inputs and **private** inputs.

* **Zero-knowledge** is a specific cryptographic property:

⋮

How?
----

* The privacy is implemented with zero-knowledge proving technology.
* A zero-knowledge proof convinces a `verifier` of some logical statement, `S`,

  + -when given `S` along with some `public` and some `private` inputs.
  + -even though `S` is an assertion about those public inputs and **private** inputs.

* **Zero-knowledge** is a specific cryptographic property:

  + *Nothing* can be learned about the private inputs from the proof.

How? zk-SNARKs.
~~~~~~~~~~~~~~~

Specifically, Zcash uses the `zk-SNARK` proving technology.

⋮

How? zk-SNARKs.
~~~~~~~~~~~~~~~

Specifically, Zcash uses the `zk-SNARK` proving technology.

* Succinct and non-interactive - necessary for a blockchain.

⋮

How? zk-SNARKs.
~~~~~~~~~~~~~~~

Specifically, Zcash uses the `zk-SNARK` proving technology.

* Succinct and non-interactive - necessary for a blockchain.

(That's all about `zk-SNARK` in this slide deck!)


A Quick Intermission
====================

pause. breath.

A Design Space Fable
====================

Nathan's brief history of "blockchain".

A Design Space Fable
--------------------

.. figure:: _static/sids-0.svg
   :width: 100%

   Once upon a time, there were databases.

A Design Space Fable
--------------------

.. figure:: _static/sids-1.svg
   :width: 100%

   They became controlled by gatekeepers. The good people needed to liberate them.

A Design Space Fable
--------------------

.. figure:: _static/sids-2.svg
   :width: 100%

   Along came Satoshi Nakamoto w/ Bitcoin: decentralized w/ strong write-authorization.

A Design Space Fable
--------------------

.. figure:: _static/sids-3.svg
   :width: 100%

   Alas! Open Transparent Blockchains didn't protect the good people's privacy…

A Design Space Fable
--------------------

.. figure:: _static/sids-4.svg
   :width: 100%

   Meanwhile "enterprise blockchains" appeared. They "solved" the privacy
   problem with gatekeepers.

A Design Space Fable
--------------------

.. figure:: _static/sids-5.svg
   :width: 100%

   Could the good people have a blockchain that was decentralized and
   also private?

A Design Space Fable
--------------------

.. figure:: _static/sids-final.svg
   :width: 100%

   Yes! Zcash is one example of an open confidential blockchain.

Reviewing the Steps
===================

a. Bitcoin demonstrated how to evolve databases into open transparent
   blockchains, giving us **decentralized write authorization**.

⋮

Reviewing the Steps
===================

a. **decentralized write authorization**
b. A lot invested in enterprise blockchains, because centralization's
   the most expedient path to **read authorization**.

⋮

Reviewing the Steps
===================

a. **decentralized write authorization**
b. **centralized read authorization**
c. Open confidential blockchains demonstrate how to regain
   decentralization with **decentralized read authorization**.

Reviewing the Steps
===================

a. **decentralized write authorization**
b. **centralized read authorization**
c. **decentralized read authorization**

Is a Blockchain really a Database?
==================================

Nathan's fabled arc of design evolution imagines blockchains as database
extensions. Is that an apt analogy?

⋮

Is a Blockchain really a Database?
==================================

Nathan's fabled arc of design evolution imagines blockchains as database
extensions. Is that an apt analogy?

I think so. Every website biz is just a glorified database frontend
making money off gatekeeping, so this strikes at the heart of the upcoming
economic transition.

Blockchain as a Database Caveats
================================

Some big caveats with this analogy:

* incentives
* scaling
* trade-offs

Thanks!
=======

- Questions?
